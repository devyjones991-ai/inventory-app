import {
  PaperClipIcon,
  MagnifyingGlassIcon,
  ChevronDownIcon,
} from "@heroicons/react/24/outline";
import {
  memo,
  useCallback,
  useEffect,
  useLayoutEffect,
  useRef,
  useState,
} from "react";

import useChat from "../hooks/useChat";
import { Object } from "../types";
import { formatDateTime } from "../utils/date";
import { linkifyText } from "../utils/linkify";
import "../assets/space-theme.css";

import AttachmentPreview from "./AttachmentPreview";
import { Button, Input } from "./ui";
import { Textarea } from "./ui/textarea";
import "../assets/chat-gpt-style.css";

interface ChatTabProps {
  selected?: Object | null;
  userEmail?: string;
  active?: boolean;
}

function ChatTab({ selected = null, userEmail, active = false }: ChatTabProps) {
  const [message, setMessage] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [showSearch, setShowSearch] = useState(false);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const scrollToBottom = useCallback(() => {
    if (
      messagesEndRef.current &&
      typeof messagesEndRef.current.scrollIntoView === "function"
    ) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, []);

  const { messages, loading, error, sendMessage, searchMessages, clearSearch } =
    useChat({
      objectId: selected?.id || "",
      userEmail: userEmail || "",
      search: searchQuery,
    });

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    if (active && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [active]);

  useLayoutEffect(() => {
    if (active && messages.length > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ DOM
      const timer = setTimeout(() => {
        scrollToBottom();
      }, 50);
      return () => clearTimeout(timer);
    }
  }, [messages, active, scrollToBottom]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –æ–∫–Ω—É –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
  useLayoutEffect(() => {
    if (!isCollapsed) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
      setTimeout(() => {
        scrollToBottom();
      }, 100);
    }
  }, [isCollapsed, scrollToBottom]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–∞
  useLayoutEffect(() => {
    if (active && !isCollapsed) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
      setTimeout(() => {
        scrollToBottom();
      }, 200);
    }
  }, [active, isCollapsed, scrollToBottom]);

  const handleSendMessage = useCallback(async () => {
    if (!message.trim() || !selected?.id) return;

    try {
      await sendMessage(message.trim());
      setMessage("");
      // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useLayoutEffect –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ messages
    } catch (error) {
      console.error("Error sending message:", error);
    }
  }, [message, selected?.id, sendMessage]);

  const handleKeyPress = useCallback(
    (e: React.KeyboardEvent) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleSendMessage();
      }
    },
    [handleSendMessage],
  );

  const handleFileUpload = useCallback(
    async (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (!file || !selected?.id) return;

      try {
        await sendMessage("", file);
      } catch (error) {
        console.error("Error uploading file:", error);
      }
    },
    [selected?.id, sendMessage],
  );

  const handleSearch = useCallback(
    async (query: string) => {
      if (!query.trim() || !selected?.id) return;

      try {
        await searchMessages(query.trim());
      } catch (error) {
        console.error("Error searching messages:", error);
      }
    },
    [selected?.id, searchMessages],
  );

  const handleClearSearch = useCallback(() => {
    setSearchQuery("");
    clearSearch();
  }, [clearSearch]);

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!selected) {
    return (
      <div className="space-card flex items-center justify-center h-64 text-space-text-muted">
        <div className="text-center">
          <div className="text-4xl mb-2">üí¨</div>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–∞</p>
        </div>
      </div>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (error) {
    return (
      <div className="space-card flex items-center justify-center h-64 text-space-text-muted">
        <div className="text-center">
          <div className="text-4xl mb-2">‚ö†Ô∏è</div>
          <p className="text-red-500 mb-2">
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞
          </p>
          <p className="text-sm">{error}</p>
          {error.includes("No objectId") && (
            <p className="text-xs text-yellow-500 mt-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–∞
            </p>
          )}
          {error.includes("Supabase") && (
            <p className="text-xs text-yellow-500 mt-2">
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –≤ public/env.js
            </p>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full min-h-0 space-bg-gradient rounded-xl">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π */}
      <div className="flex-shrink-0 space-card p-4 border-b border-space-border">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="space-title text-xl">üí¨ –ß–∞—Ç</h3>
            <p className="text-space-text-muted">
              –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ –æ–±—ä–µ–∫—Ç—É "{selected.name}"
            </p>
          </div>
          <div className="flex items-center gap-2">
            <button
              className="space-button p-2"
              onClick={() => setShowSearch(!showSearch)}
              aria-label="–ù–∞–π—Ç–∏"
            >
              <MagnifyingGlassIcon className="w-4 h-4" />
            </button>
            <button
              className="space-button p-2"
              onClick={() => setIsCollapsed(!isCollapsed)}
              aria-label={isCollapsed ? "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —á–∞—Ç" : "–°–≤–µ—Ä–Ω—É—Ç—å —á–∞—Ç"}
            >
              <ChevronDownIcon
                className={`w-4 h-4 transition-transform ${isCollapsed ? "rotate-180" : ""}`}
              />
            </button>
          </div>
        </div>

        {showSearch && (
          <div className="mt-4">
            <div className="flex gap-3">
              <input
                className="space-input flex-1"
                placeholder="üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === "Enter") {
                    handleSearch(searchQuery);
                  }
                }}
              />
              <button
                className="space-button"
                onClick={() => handleSearch(searchQuery)}
              >
                üîç –ù–∞–π—Ç–∏
              </button>
              <button className="space-button" onClick={handleClearSearch}>
                ‚ùå –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {!isCollapsed && (
        <>
          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π - –ì–õ–ê–í–ù–û–ï! */}
          <div className="flex-1 overflow-y-auto min-h-0 space-list">
            {loading && (
              <div className="space-card p-4 text-center text-space-text-muted">
                <div className="text-2xl mb-2">‚è≥</div>
                –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...
              </div>
            )}

            {error && (
              <div className="space-card p-4 text-center text-red-500">
                <div className="text-2xl mb-2">‚ö†Ô∏è</div>
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {error}
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}

            {messages.map((msg, index) => {
              const isCurrentUser = msg.sender === userEmail;
              const prevMsg = index > 0 ? messages[index - 1] : null;
              const isNewSender = !prevMsg || prevMsg.sender !== msg.sender;

              return (
                <div
                  key={msg.id}
                  className={`chat-message ${isCurrentUser ? "user" : "assistant"}`}
                >
                  {isNewSender && (
                    <div className="chat-message-sender-header">
                      <span className="chat-sender-name">
                        {isCurrentUser ? "–í—ã" : msg.sender}
                      </span>
                    </div>
                  )}
                  <div className="chat-message-bubble">
                    <div className="chat-message-content">
                      {msg.file_url ? (
                        <div>
                          <p className="link-container">
                            {linkifyText(msg.content, 50, "CHAT")}
                          </p>
                          <AttachmentPreview url={msg.file_url} />
                        </div>
                      ) : (
                        <p className="link-container">
                          {linkifyText(msg.content, 50, "CHAT")}
                        </p>
                      )}
                    </div>
                    <div className="chat-message-time">
                      {formatDateTime(msg.created_at)}
                    </div>
                  </div>
                </div>
              );
            })}
            <div ref={messagesEndRef} />
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–Ω–∏–∑—É */}
          <div className="flex-shrink-0 space-card p-4 border-t border-space-border">
            <div className="flex gap-3">
              <div className="flex-1">
                <textarea
                  ref={textareaRef}
                  className="space-input w-full resize-none"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  rows={3}
                />
              </div>
              <div className="flex flex-col gap-2">
                <button
                  className="space-button p-2"
                  onClick={() => fileInputRef.current?.click()}
                  aria-label="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
                >
                  üìé
                </button>
                <button
                  className="space-button space-active p-2"
                  onClick={handleSendMessage}
                  disabled={!message.trim()}
                >
                  üì§
                </button>
              </div>
            </div>
            <input
              ref={fileInputRef}
              type="file"
              className="hidden"
              onChange={handleFileUpload}
              aria-label="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
            />
          </div>
        </>
      )}
    </div>
  );
}

export default memo(ChatTab);
