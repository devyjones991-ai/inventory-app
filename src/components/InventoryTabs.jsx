import React, { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import HardwareCard from './HardwareCard';
import TaskCard from './TaskCard';
import ChatTab from './ChatTab';
import { linkifyText } from '../utils/linkify';

// —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
function formatDate(dateStr) {
  if (!dateStr) return '';
  try {
    return new Date(dateStr).toLocaleDateString('ru-RU');
  } catch {
    return dateStr;
  }
}

export default function InventoryTabs({ selected, onUpdateSelected, user }) {
  // --- –≤–∫–ª–∞–¥–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ---
  const [tab, setTab] = useState('desc')
  const [description, setDescription] = useState('')
  const [isEditingDesc, setIsEditingDesc] = useState(false)

  // --- –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ---
  const [hardware, setHardware]         = useState([])
  const [loadingHW, setLoadingHW]       = useState(false)
  const [isHWModalOpen, setIsHWModalOpen] = useState(false)
  const [editingHW, setEditingHW]       = useState(null)
  const [hwForm, setHWForm]             = useState({ name: '', location: '', purchase_status: '–Ω–µ –æ–ø–ª–∞—á–µ–Ω', install_status: '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' })

  // --- –∑–∞–¥–∞—á–∏ ---
  const [tasks, setTasks]               = useState([])
  const [loadingTasks, setLoadingTasks] = useState(false)
  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false)
  const [editingTask, setEditingTask]   = useState(null)
  const [taskForm, setTaskForm]         = useState({ title: '', status: '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', assignee: '', due_date: '', notes: '' })
  const [showDatePicker, setShowDatePicker] = useState(false)
  const [viewingTask, setViewingTask]   = useState(null)

  // --- —á–∞—Ç—ã ---
  const [chats, setChats]               = useState([])

  // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –æ–±—ä–µ–∫—Ç–∞
  useEffect(() => {
    if (!selected) return
    setTab('desc')
    setDescription(selected.description || '')
    fetchHardware(selected.id)
    fetchTasks(selected.id)
    supabase.from('chat_messages').select('*').eq('object_id', selected.id)
      .then(({ data }) => setChats(data || []))
  }, [selected])

  // --- CRUD –û–ø–∏—Å–∞–Ω–∏–µ ---
  async function saveDescription() {
    const { data, error } = await supabase
      .from('objects').update({ description }).eq('id', selected.id).select()
    if (!error) {
      onUpdateSelected({ ...selected, description: data[0].description })
      setIsEditingDesc(false)
    } else alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è')
  }

  // --- CRUD –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ---
  async function fetchHardware(objectId) {
    setLoadingHW(true)
    const { data, error } = await supabase
      .from('hardware').select('*').eq('object_id', objectId).order('created_at')
    if (!error) setHardware(data)
    setLoadingHW(false)
  }
  function openHWModal(item = null) {
    if (item) {
      setEditingHW(item)
      setHWForm({
        name: item.name,
        location: item.location,
        purchase_status: item.purchase_status,
        install_status: item.install_status
      })
    } else {
      setEditingHW(null)
      setHWForm({ name: '', location: '', purchase_status: '–Ω–µ –æ–ø–ª–∞—á–µ–Ω', install_status: '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' })
    }
    setIsHWModalOpen(true)
  }
  async function saveHardware() {
    const payload = { object_id: selected.id, ...hwForm }
    let res
    if (editingHW) {
      res = await supabase.from('hardware').update(payload).eq('id', editingHW.id).select().single()
    } else {
      res = await supabase.from('hardware').insert([payload]).select().single()
    }
    if (res.error) return alert('–û—à–∏–±–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ' + res.error.message)
    const rec = res.data
    setHardware(prev => editingHW ? prev.map(h => h.id === rec.id ? rec : h) : [...prev, rec])
    setIsHWModalOpen(false)
  }
  async function deleteHardware(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?')) return
    const { error } = await supabase.from('hardware').delete().eq('id', id)
    if (error) return alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')
    setHardware(prev => prev.filter(h => h.id !== id))
  }

  // --- CRUD –ó–∞–¥–∞—á–∏ ---
  async function fetchTasks(objectId) {
    setLoadingTasks(true)
    const { data, error } = await supabase
      .from('tasks').select('*').eq('object_id', objectId).order('created_at')
    if (!error) setTasks(data)
    setLoadingTasks(false)
  }
  function openTaskModal(item = null) {
    if (item) {
      setEditingTask(item)
      setTaskForm({
        title: item.title,
        status: item.status,
        assignee: item.assignee || item.executor || '',
        due_date: item.due_date || item.planned_date || item.plan_date || '',
        notes: item.notes || ''
      })
    } else {
      setEditingTask(null)
      setTaskForm({ title: '', status: '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', assignee: '', due_date: '', notes: '' })
    }
    setShowDatePicker(false)
    setIsTaskModalOpen(true)
  }

  function openTaskView(item) {
    setViewingTask(item)
  }
  async function saveTask() {
    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –±–µ–∑ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ —Å—Ö–µ–º–µ
    const base = { title: taskForm.title, status: taskForm.status }
    if (taskForm.due_date) {
      base.due_date = taskForm.due_date
      base.planned_date = taskForm.due_date
      base.plan_date = taskForm.due_date
    }
    if (taskForm.assignee) {
      base.assignee = taskForm.assignee
      base.executor = taskForm.assignee
    }
    if (taskForm.notes) {
      base.notes = taskForm.notes
    }
    let payload = { object_id: selected.id, ...base }

    let res
    if (editingTask) {
      res = await supabase.from('tasks').update(payload).eq('id', editingTask.id).select().single()
    } else {
      res = await supabase.from('tasks').insert([payload]).select().single()
    }

    // –µ—Å–ª–∏ –ë–î –Ω–µ –∑–Ω–∞–µ—Ç –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö, –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ –Ω–∏—Ö
    if (res.error && /(assignee|executor|due_date|planned_date|plan_date|notes)/.test(res.error.message)) {
      const { assignee, executor, due_date, planned_date, plan_date, notes, ...baseWithoutExtras } = payload
      if (editingTask) {
        res = await supabase.from('tasks').update(baseWithoutExtras).eq('id', editingTask.id).select().single()
      } else {
        res = await supabase.from('tasks').insert([baseWithoutExtras]).select().single()
      }
    }

    if (res.error) return alert('–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á: ' + res.error.message)
    const rec = res.data
    setTasks(prev => editingTask ? prev.map(t => t.id === rec.id ? rec : t) : [...prev, rec])
    setIsTaskModalOpen(false)
  }
  async function deleteTask(id) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) return
    const { error } = await supabase.from('tasks').delete().eq('id', id)
    if (error) return alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')
    setTasks(prev => prev.filter(t => t.id !== id))
  }

  return (
    <div className="flex flex-col h-full">
      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="tabs tabs-boxed">
        <button className={`tab ${tab==='desc'? 'tab-active':''}`} onClick={()=>setTab('desc')}>üìù –û–ø–∏—Å–∞–Ω–∏–µ</button>
        <button className={`tab ${tab==='hw'? 'tab-active':''}`} onClick={()=>setTab('hw')}>üõ† –ñ–µ–ª–µ–∑–æ ({hardware.length})</button>
        <button className={`tab ${tab==='tasks'? 'tab-active':''}`} onClick={()=>setTab('tasks')}>‚úÖ –ó–∞–¥–∞—á–∏ ({tasks.length})</button>
        <button className={`tab ${tab==='chats'? 'tab-active':''}`} onClick={()=>setTab('chats')}>üí¨ –ß–∞—Ç—ã ({chats.length})</button>
      </div>

      <div className="flex-1 overflow-auto p-4">
        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        {tab==='desc' && (
          <div>
            <div className="flex justify-between items-center">
              <h3 className="text-xl font-semibold">{selected.name}</h3>
              {!isEditingDesc && <button className="btn btn-sm btn-outline" onClick={()=>setIsEditingDesc(true)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>}
            </div>
            {isEditingDesc ? (
              <>
                <textarea className="textarea textarea-bordered w-full mt-4" rows={4} value={description} onChange={e=>setDescription(e.target.value)} />
                <div className="mt-2 flex space-x-2">
                  <button className="btn btn-primary btn-sm" onClick={saveDescription}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                  <button className="btn btn-ghost btn-sm" onClick={()=>setIsEditingDesc(false)}>–û—Ç–º–µ–Ω–∞</button>
                </div>
              </>
            ) : (
              description ? (
                <p
                  className="mt-2 whitespace-pre-wrap break-all"
                  dangerouslySetInnerHTML={{ __html: linkifyText(description) }}
                />
              ) : (
                <p className="mt-2">–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</p>
              )
            )}
          </div>
        )}

        {/* –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
        {tab==='hw' && (
          <div>
            <div className="flex justify-between mb-4">
              <h3 className="text-xl font-semibold">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h3>
              <button className="btn btn-sm btn-primary" onClick={()=>openHWModal()}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            {loadingHW ? <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p> : (
              <div className="space-y-2">{hardware.map(h=><HardwareCard key={h.id} item={h} onEdit={()=>openHWModal(h)} onDelete={()=>deleteHardware(h.id)}/>)}</div>
            )}

            {isHWModalOpen && (
              <div className="modal modal-open fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="modal-box relative w-full max-w-md">
                  <button className="btn btn-sm btn-circle absolute right-2 top-2" onClick={()=>setIsHWModalOpen(false)}>‚úï</button>
                  <h3 className="font-bold text-lg mb-4">{editingHW ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'} –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h3>

                  <div className="space-y-4">
                    <div className="form-control">
                      <label className="label"><span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</span></label>
                      <input
                        type="text"
                        className="input input-bordered w-full"
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, keenetic giga"
                        value={hwForm.name}
                        onChange={e=>setHWForm(f=>({...f,name:e.target.value}))}
                      />
                    </div>
                    <div className="form-control">
                      <label className="label"><span className="label-text">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</span></label>
                      <input
                        type="text"
                        className="input input-bordered w-full"
                        placeholder="–ì–¥–µ —Å—Ç–æ–∏—Ç"
                        value={hwForm.location}
                        onChange={e=>setHWForm(f=>({...f,location:e.target.value}))}
                      />
                    </div>
                    <div className="flex space-x-4">
                      <div className="form-control flex-1">
                        <label className="label"><span className="label-text">–°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏</span></label>
                        <select
                          className="select select-bordered w-full"
                          value={hwForm.purchase_status}
                          onChange={e=>setHWForm(f=>({...f,purchase_status:e.target.value}))}
                        >
                          <option value="–Ω–µ –æ–ø–ª–∞—á–µ–Ω">–ù–µ –æ–ø–ª–∞—á–µ–Ω</option>
                          <option value="–æ–ø–ª–∞—á–µ–Ω">–û–ø–ª–∞—á–µ–Ω</option>
                        </select>
                      </div>
                      <div className="form-control flex-1">
                        <label className="label"><span className="label-text">–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏</span></label>
                        <select
                          className="select select-bordered w-full"
                          value={hwForm.install_status}
                          onChange={e=>setHWForm(f=>({...f,install_status:e.target.value}))}
                        >
                          <option value="–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω">–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</option>
                          <option value="—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω">–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</option>
                        </select>
                      </div>
                    </div>
                  </div>

                  <div className="modal-action flex space-x-2">
                    <button className="btn btn-primary" onClick={saveHardware}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button className="btn btn-ghost" onClick={()=>setIsHWModalOpen(false)}>–û—Ç–º–µ–Ω–∞</button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ó–∞–¥–∞—á–∏ */}
        {tab==='tasks' && (
          <div>
            <div className="flex justify-between mb-4">
              <h3 className="text-xl font-semibold">–ó–∞–¥–∞—á–∏</h3>
              <button className="btn btn-sm btn-primary" onClick={()=>openTaskModal()}>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
            </div>
            {loadingTasks ? <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p> : (
              <div className="space-y-2">
                {tasks.map(t=><TaskCard key={t.id} item={t} onView={()=>openTaskView(t)} onEdit={()=>openTaskModal(t)} onDelete={()=>deleteTask(t.id)}/>)}
              </div>
            )}

            {isTaskModalOpen && (
              <div className="modal modal-open fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="modal-box relative w-full max-w-md">
                  <button className="btn btn-sm btn-circle absolute right-2 top-2" onClick={()=>setIsTaskModalOpen(false)}>‚úï</button>
                  <h3 className="font-bold text-lg mb-4">{editingTask ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'} –∑–∞–¥–∞—á—É</h3>
                  <div className="space-y-4">
                    <div className="form-control">
                      <label className="label"><span className="label-text">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏</span></label>
                      <input
                        type="text"
                        className="input input-bordered w-full"
                        value={taskForm.title}
                        onChange={e=>setTaskForm(f=>({...f,title:e.target.value}))}
                      />
                    </div>
                    <div className="form-control">
                      <label className="label"><span className="label-text">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</span></label>
                      <input
                        type="text"
                        className="input input-bordered w-full"
                        value={taskForm.assignee}
                        onChange={e=>setTaskForm(f=>({...f,assignee:e.target.value}))}
                      />
                    </div>
                    <div className="form-control">
                      <label className="label flex items-center"><span className="label-text">–î–∞—Ç–∞</span>
                        <button type="button" className="ml-2 btn btn-ghost btn-xs" onClick={()=>setShowDatePicker(s=>!s)}>üìÖ</button>
                      </label>
                      {showDatePicker && (
                        <input
                          type="date"
                          className="input input-bordered w-full"
                          value={taskForm.due_date}
                          onChange={e=>setTaskForm(f=>({...f,due_date:e.target.value}))}
                        />
                      )}
                    </div>
                    <div className="form-control">
                      <label className="label"><span className="label-text">–°—Ç–∞—Ç—É—Å</span></label>
                      <select
                        className="select select-bordered w-full"
                        value={taskForm.status}
                        onChange={e=>setTaskForm(f=>({...f,status:e.target.value}))}
                      >
                        <option value="–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
                        <option value="–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                        <option value="–∑–∞–≤–µ—Ä—à–µ–Ω–æ">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                      </select>
                    </div>
                    <div className="form-control">
                      <label className="label"><span className="label-text">–ó–∞–º–µ—Ç–∫–∏</span></label>
                      <textarea
                        className="textarea textarea-bordered w-full"
                        rows={3}
                        value={taskForm.notes}
                        onChange={e=>setTaskForm(f=>({...f,notes:e.target.value}))}
                      />
                    </div>
                  </div>
                  <div className="modal-action flex space-x-2">
                    <button className="btn btn-primary" onClick={saveTask}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button className="btn btn-ghost" onClick={()=>setIsTaskModalOpen(false)}>–û—Ç–º–µ–Ω–∞</button>
                  </div>
                </div>
              </div>
            )}

            {viewingTask && (
              <div className="modal modal-open fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div className="modal-box relative w-full max-w-md">
                  <button className="btn btn-sm btn-circle absolute right-2 top-2" onClick={()=>setViewingTask(null)}>‚úï</button>
                  <h3 className="font-bold text-lg mb-4">{viewingTask.title}</h3>
                  <div className="space-y-2">
                    {(viewingTask.assignee || viewingTask.executor) && (
                      <p><strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> {viewingTask.assignee || viewingTask.executor}</p>
                    )}
                    {(viewingTask.due_date || viewingTask.planned_date || viewingTask.plan_date) && (
                      <p><strong>–î–∞—Ç–∞:</strong> {formatDate(viewingTask.due_date || viewingTask.planned_date || viewingTask.plan_date)}</p>
                    )}
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {viewingTask.status}</p>
                    {viewingTask.notes && (
                      <p className="whitespace-pre-wrap break-words"><strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {viewingTask.notes}</p>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ß–∞—Ç—ã */}
        {tab==='chats' && <ChatTab selected={selected} user={user} />}
      </div>
    </div>
  )
}
