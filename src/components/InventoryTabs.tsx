import { PlusIcon } from "@heroicons/react/24/outline";
import { zodResolver } from "@hookform/resolvers/zod";
import React, { useState, useCallback, Suspense, lazy } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { useHardware } from "../hooks/useHardware";
import { useTasks } from "../hooks/useTasks";
// import { t } from "../i18n";
import { Object, Hardware, Task } from "../types";
import { linkifyText } from "../utils/linkify";
import "../assets/space-theme.css";

import FormError from "./FormError";
import HardwareCard from "./HardwareCard";
import Spinner from "./Spinner";
const ChatTab = lazy(() => import("./ChatTab"));
const TasksTab = lazy(() => import("./TasksTab"));
import { Button } from "./ui/button";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "./ui/dialog";
import { Input } from "./ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { Textarea } from "./ui/textarea";

const hardwareSchema = z.object({
  name: z.string().min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  type: z.string().min(1, "–¢–∏–ø –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  location: z.string().optional(),
  model: z.string().optional(),
  serial_number: z.string().optional(),
  purchase_date: z.string().optional(),
  warranty_expiry: z.string().optional(),
  cost: z.string().optional(),
  vendor: z.string().optional(),
  notes: z.string().optional(),
});

interface InventoryTabsProps {
  selected: Object | null;
  userEmail: string;
  chatCount?: number;
  tasksCount?: number;
  hardwareCount?: number;
  onTabChange?: (tab: string) => void;
}

export default function InventoryTabs({
  selected,
  userEmail,
  chatCount = 0,
  tasksCount = 0,
  hardwareCount = 0,
  onTabChange,
}: InventoryTabsProps) {
  const [activeTab, setActiveTab] = useState("desc");

  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
    onTabChange?.(tab);
  };
  const [isHardwareModalOpen, setIsHardwareModalOpen] = useState(false);
  const [editingHardware, setEditingHardware] = useState<Hardware | null>(null);
  const { hardware, deleteHardware } = useHardware();

  const { tasks, createTask, updateTask, deleteTask } = useTasks(
    selected?.id || "",
  );

  const {
    register: registerHardware,
    handleSubmit: handleHardwareSubmit,
    formState: { errors: hardwareErrors },
    reset: resetHardware,
  } = useForm({
    resolver: zodResolver(hardwareSchema),
  });

  const openAddHardwareModal = useCallback(() => {
    setEditingHardware(null);
    setIsHardwareModalOpen(true);
  }, []);

  const openEditHardwareModal = useCallback((hardware: Hardware) => {
    setEditingHardware(hardware);
    setIsHardwareModalOpen(true);
  }, []);

  const closeHardwareModal = useCallback(() => {
    setIsHardwareModalOpen(false);
    setEditingHardware(null);
    resetHardware();
  }, [resetHardware]);

  const handleDeleteHardware = useCallback(
    async (id: string) => {
      if (confirm("–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?")) {
        await deleteHardware(id);
      }
    },
    [deleteHardware],
  );

  return (
    <div className="space-y-6 space-bg-gradient p-6 rounded-xl">
      {/* –ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º */}
      <div className="space-card p-6 space-fade-in">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h3 className="space-title text-xl mb-2">üì¶ {selected.name}</h3>
            <p className="text-space-text-muted link-container">
              {linkifyText(selected.description, 60, "DESCRIPTION")}
            </p>
            {selected.location && (
              <div className="mt-4">
                <h4 className="text-space-text font-semibold">
                  üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                </h4>
                <p className="text-space-text-muted">{selected.location}</p>
              </div>
            )}
          </div>
          <div className="flex items-center gap-2 ml-4">
            <button
              className="space-sidebar-button"
              onClick={() => {
                /* TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ */
              }}
              aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç"
            >
              ‚úèÔ∏è
            </button>
            <button
              className="space-sidebar-button danger"
              onClick={() => {
                /* TODO: –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ */
              }}
              aria-label="–£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç"
            >
              üóëÔ∏è
            </button>
          </div>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={handleTabChange}>
        <TabsList className="grid w-full grid-cols-3 bg-space-bg-light p-1 rounded-lg border border-space-border">
          <TabsTrigger
            value="hw"
            className="data-[state=active]:space-active data-[state=active]:text-white transition-all duration-300 relative"
          >
            üîß –ñ–µ–ª–µ–∑–æ ({hardware.length})
            {hardwareCount > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                {hardwareCount}
              </span>
            )}
          </TabsTrigger>
          <TabsTrigger
            value="tasks"
            className="data-[state=active]:space-active data-[state=active]:text-white transition-all duration-300 relative"
          >
            ‚úÖ –ó–∞–¥–∞—á–∏ ({tasks.length})
            {tasksCount > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                {tasksCount}
              </span>
            )}
          </TabsTrigger>
          <TabsTrigger
            value="chat"
            className="data-[state=active]:space-active data-[state=active]:text-white transition-all duration-300 relative"
          >
            üí¨ –ß–∞—Ç
            {chatCount > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                {chatCount}
              </span>
            )}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="hw" className="space-y-6">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="space-title text-xl">üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h3>
              <p className="text-space-text-muted">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
              </p>
            </div>
            <Button
              onClick={openAddHardwareModal}
              className="space-button space-fade-in"
            >
              <PlusIcon className="w-4 h-4 mr-2" />
              üîß –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </div>

          {hardware.length === 0 ? (
            <div className="space-card flex items-center justify-center h-32 text-space-text-muted">
              <div className="text-center">
                <div className="text-4xl mb-2">üîß</div>
                <p>–ù–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</p>
                <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!</p>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {hardware.map((item: Hardware) => (
                <HardwareCard
                  key={item.id}
                  item={item}
                  onEdit={() => openEditHardwareModal(item)}
                  onDelete={() => handleDeleteHardware(item.id)}
                  user={null}
                />
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="tasks" className="space-y-4">
          <Suspense fallback={<Spinner />}>
            <TasksTab
              selected={selected}
              tasks={tasks}
              loading={false}
              error={null}
              onCreateTask={createTask}
              onUpdateTask={updateTask}
              onDeleteTask={deleteTask}
            />
          </Suspense>
        </TabsContent>

        <TabsContent value="chat" className="space-y-4">
          <Suspense fallback={<Spinner />}>
            <ChatTab
              selected={selected}
              userEmail={userEmail}
              active={activeTab === "chat"}
            />
          </Suspense>
        </TabsContent>
      </Tabs>

      {/* Hardware Modal */}
      <Dialog open={isHardwareModalOpen} onOpenChange={setIsHardwareModalOpen}>
        <DialogContent className="max-w-2xl space-modal space-fade-in">
          <DialogHeader className="space-modal-header">
            <DialogTitle className="text-white text-xl">
              {editingHardware
                ? "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
                : "üîß –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"}
            </DialogTitle>
          </DialogHeader>
          <form onSubmit={handleHardwareSubmit} className="space-y-6 p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üîß –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                </label>
                <Input
                  {...registerHardware("name")}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è..."
                  className="space-input w-full"
                />
                <FormError message={hardwareErrors.name?.message} />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üìã –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                </label>
                <Input
                  {...registerHardware("type")}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è..."
                  className="space-input w-full"
                />
                <FormError message={hardwareErrors.type?.message} />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                </label>
                <Input
                  {...registerHardware("location")}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ..."
                  className="space-input w-full"
                />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üè∑Ô∏è –ú–æ–¥–µ–ª—å
                </label>
                <Input
                  {...registerHardware("model")}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å..."
                  className="space-input w-full"
                />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
                </label>
                <Input
                  {...registerHardware("serial_number")}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä..."
                  className="space-input w-full"
                />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫
                </label>
                <Input
                  {...registerHardware("vendor")}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞..."
                  className="space-input w-full"
                />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
                </label>
                <Input
                  {...registerHardware("purchase_date")}
                  type="date"
                  className="space-input w-full"
                />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  ‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏
                </label>
                <Input
                  {...registerHardware("warranty_expiry")}
                  type="date"
                  className="space-input w-full"
                />
              </div>
              <div className="space-y-2">
                <label className="text-space-text font-semibold">
                  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å
                </label>
                <Input
                  {...registerHardware("cost")}
                  type="number"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å..."
                  className="space-input w-full"
                />
              </div>
            </div>
            <div className="space-y-2">
              <label className="text-space-text font-semibold">
                üìù –ó–∞–º–µ—Ç–∫–∏
              </label>
              <Textarea
                {...registerHardware("notes")}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏..."
                className="space-input w-full"
                rows={3}
              />
            </div>
            <DialogFooter className="flex gap-4 pt-6">
              <Button
                type="button"
                variant="outline"
                onClick={closeHardwareModal}
                className="space-button"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="submit" className="space-button space-active">
                {editingHardware ? "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "üîß –î–æ–±–∞–≤–∏—Ç—å"}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}
